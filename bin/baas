#!/usr/bin/env node

const program    = require('commander');
const path       = require('path');
const fs         = require('fs');
const yaml       = require('js-yaml');
const _          = require('lodash');
const BaaSServer = require('../server');
const bunyan     = require('bunyan');
var agent        = require('auth0-instrumentation');

program.version(require('../package').version)
  .option('-p --port [9485]', 'Port to bind [9485].', '9485')
  .option('-h --hostname [0.0.0.0]', 'Hostname to bind [0.0.0.0].', '0.0.0.0')
  .option('-s --salt [10]', 'Salt length.', '10')
  .option('-l --log-level [info]', 'Debug level', 'info')
  .option('-c --config-file <file>', 'Configuration file.')
  .parse(process.argv);

var config = _.pick(program, ['salt', 'port', 'hostname', 'configFile', 'logLevel']);

if (config.configFile) {
  try {
    var config_file = path.resolve(process.cwd(), config.configFile);
    var doc = yaml.safeLoad(fs.readFileSync(config_file, 'utf8'));
    _.extend(config, doc);
  } catch (e) {
    console.error('Error loading configuration \n', e.stack);
  }
}

agent.init({ name: 'baas' }, {
  METRICS_API_KEY: process.env.METRICS_API_KEY || config.metricsApiKey,
  STATSD_HOST: process.env.STATSD_HOST || config.statsdHost,
  METRICS_PREFIX: process.env.METRICS_PREFIX || config.metricsPrefix,
  ERROR_REPORTER_URL: process.env.ERROR_REPORTER_URL || config.errorReporterUrl,
  LOG_LEVEL: process.env.LOG_LEVEL || config.logLevel,
  AWS_REGION: process.env.AWS_REGION,
  AWS_KINESIS_REGION: process.env.AWS_KINESIS_REGION,
  LOG_TO_KINESIS: process.env.LOG_TO_KINESIS || config.logToKinesis,
  LOG_TO_KINESIS_LEVEL: process.env.LOG_LEVEL || config.logLevel,
  COLLECT_RESOURCE_USAGE: process.env.COLLECT_RESOURCE_USAGE || config.collectResourceUsage
}, bunyan.stdSerializers);

config.logger = agent.logger;
config.metrics = agent.metrics;
var server = new BaaSServer(config);

server.start();

process.on('SIGTERM', function () {
  server.stop(function () {
    process.exit(0);
  });
  setTimeout(function () {
    process.exit(0);
  }, 100);
});

